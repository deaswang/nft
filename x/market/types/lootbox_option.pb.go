// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/lootbox_option.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LootboxOption struct {
	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MaxQuantity uint64  `protobuf:"varint,2,opt,name=maxQuantity,proto3" json:"maxQuantity,omitempty"`
	Probability []int32 `protobuf:"varint,3,rep,packed,name=probability,proto3" json:"probability,omitempty"`
	Guaranteed  bool    `protobuf:"varint,4,opt,name=guaranteed,proto3" json:"guaranteed,omitempty"`
	Guarantees  []int32 `protobuf:"varint,5,rep,packed,name=guarantees,proto3" json:"guarantees,omitempty"`
	Creator     string  `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LootboxOption) Reset()         { *m = LootboxOption{} }
func (m *LootboxOption) String() string { return proto.CompactTextString(m) }
func (*LootboxOption) ProtoMessage()    {}
func (*LootboxOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_57873a188953ca26, []int{0}
}
func (m *LootboxOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LootboxOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LootboxOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LootboxOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LootboxOption.Merge(m, src)
}
func (m *LootboxOption) XXX_Size() int {
	return m.Size()
}
func (m *LootboxOption) XXX_DiscardUnknown() {
	xxx_messageInfo_LootboxOption.DiscardUnknown(m)
}

var xxx_messageInfo_LootboxOption proto.InternalMessageInfo

func (m *LootboxOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LootboxOption) GetMaxQuantity() uint64 {
	if m != nil {
		return m.MaxQuantity
	}
	return 0
}

func (m *LootboxOption) GetProbability() []int32 {
	if m != nil {
		return m.Probability
	}
	return nil
}

func (m *LootboxOption) GetGuaranteed() bool {
	if m != nil {
		return m.Guaranteed
	}
	return false
}

func (m *LootboxOption) GetGuarantees() []int32 {
	if m != nil {
		return m.Guarantees
	}
	return nil
}

func (m *LootboxOption) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*LootboxOption)(nil), "deaswang.nft.market.LootboxOption")
}

func init() { proto.RegisterFile("market/lootbox_option.proto", fileDescriptor_57873a188953ca26) }

var fileDescriptor_57873a188953ca26 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0xe3, 0xaf, 0x69, 0x3f, 0x30, 0x62, 0x31, 0x8b, 0x25, 0x24, 0xcb, 0x62, 0x40, 0x99,
	0xe2, 0x81, 0x17, 0x40, 0xcc, 0x48, 0x88, 0x8c, 0x2c, 0xe8, 0xdc, 0xba, 0x21, 0xa2, 0xf1, 0x45,
	0xce, 0x45, 0xa4, 0x6f, 0xc1, 0x2b, 0xb1, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0, 0xba, 0x54,
	0x0a, 0xdb, 0xdd, 0xef, 0x7e, 0x3a, 0xdd, 0xfd, 0xf9, 0x65, 0x0d, 0xe1, 0xd5, 0x91, 0xd9, 0x20,
	0x92, 0xc5, 0xfe, 0x19, 0x1b, 0xaa, 0xd0, 0xe7, 0x4d, 0x40, 0x42, 0x71, 0xb1, 0x72, 0xd0, 0xbe,
	0x81, 0x2f, 0x73, 0xbf, 0xa6, 0xfc, 0x60, 0x5e, 0x7d, 0x30, 0x7e, 0x7e, 0x7f, 0xb0, 0x1f, 0xa2,
	0x2c, 0x04, 0x4f, 0x3d, 0xd4, 0x4e, 0x32, 0xcd, 0xb2, 0xd3, 0x22, 0xd6, 0x42, 0xf3, 0xb3, 0x1a,
	0xfa, 0xc7, 0x0e, 0x3c, 0x55, 0xb4, 0x95, 0xff, 0x34, 0xcb, 0xd2, 0x62, 0x8a, 0xf6, 0x46, 0x13,
	0xd0, 0x82, 0xad, 0x36, 0x7b, 0x63, 0xa6, 0x67, 0xd9, 0xbc, 0x98, 0x22, 0xa1, 0x38, 0x2f, 0x3b,
	0x08, 0xe0, 0xc9, 0xb9, 0x95, 0x4c, 0x35, 0xcb, 0x4e, 0x8a, 0x09, 0xf9, 0x33, 0x6f, 0xe5, 0x3c,
	0x2e, 0x98, 0x10, 0x21, 0xf9, 0xff, 0x65, 0x70, 0x40, 0x18, 0xe4, 0x22, 0x9e, 0x76, 0x6c, 0xef,
	0x6e, 0x3f, 0x07, 0xc5, 0x76, 0x83, 0x62, 0xdf, 0x83, 0x62, 0xef, 0xa3, 0x4a, 0x76, 0xa3, 0x4a,
	0xbe, 0x46, 0x95, 0x3c, 0x5d, 0x97, 0x15, 0xbd, 0x74, 0x36, 0x5f, 0x62, 0x6d, 0x8e, 0xdf, 0x1b,
	0xbf, 0x26, 0xd3, 0x9b, 0xdf, 0xa4, 0x68, 0xdb, 0xb8, 0xd6, 0x2e, 0x62, 0x42, 0x37, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0x6b, 0xed, 0x62, 0x40, 0x01, 0x00, 0x00,
}

func (m *LootboxOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootboxOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LootboxOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLootboxOption(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Guarantees) > 0 {
		dAtA2 := make([]byte, len(m.Guarantees)*10)
		var j1 int
		for _, num1 := range m.Guarantees {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLootboxOption(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.Guaranteed {
		i--
		if m.Guaranteed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Probability) > 0 {
		dAtA4 := make([]byte, len(m.Probability)*10)
		var j3 int
		for _, num1 := range m.Probability {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintLootboxOption(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxQuantity != 0 {
		i = encodeVarintLootboxOption(dAtA, i, uint64(m.MaxQuantity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLootboxOption(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLootboxOption(dAtA []byte, offset int, v uint64) int {
	offset -= sovLootboxOption(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LootboxOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLootboxOption(uint64(l))
	}
	if m.MaxQuantity != 0 {
		n += 1 + sovLootboxOption(uint64(m.MaxQuantity))
	}
	if len(m.Probability) > 0 {
		l = 0
		for _, e := range m.Probability {
			l += sovLootboxOption(uint64(e))
		}
		n += 1 + sovLootboxOption(uint64(l)) + l
	}
	if m.Guaranteed {
		n += 2
	}
	if len(m.Guarantees) > 0 {
		l = 0
		for _, e := range m.Guarantees {
			l += sovLootboxOption(uint64(e))
		}
		n += 1 + sovLootboxOption(uint64(l)) + l
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLootboxOption(uint64(l))
	}
	return n
}

func sovLootboxOption(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLootboxOption(x uint64) (n int) {
	return sovLootboxOption(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LootboxOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLootboxOption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LootboxOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LootboxOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLootboxOption
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLootboxOption
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQuantity", wireType)
			}
			m.MaxQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLootboxOption
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Probability = append(m.Probability, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLootboxOption
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLootboxOption
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLootboxOption
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Probability) == 0 {
					m.Probability = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLootboxOption
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Probability = append(m.Probability, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guaranteed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guaranteed = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLootboxOption
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Guarantees = append(m.Guarantees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLootboxOption
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLootboxOption
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLootboxOption
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Guarantees) == 0 {
					m.Guarantees = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLootboxOption
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Guarantees = append(m.Guarantees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Guarantees", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLootboxOption
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLootboxOption
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLootboxOption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLootboxOption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLootboxOption(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLootboxOption
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLootboxOption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLootboxOption
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLootboxOption
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLootboxOption
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLootboxOption        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLootboxOption          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLootboxOption = fmt.Errorf("proto: unexpected end of group")
)
