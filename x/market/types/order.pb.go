// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/order.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Order struct {
	Hash             string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Maker            string `protobuf:"bytes,2,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker            string `protobuf:"bytes,3,opt,name=taker,proto3" json:"taker,omitempty"`
	MakerRelayerFee  uint64 `protobuf:"varint,4,opt,name=makerRelayerFee,proto3" json:"makerRelayerFee,omitempty"`
	TakerRelayerFee  uint64 `protobuf:"varint,5,opt,name=takerRelayerFee,proto3" json:"takerRelayerFee,omitempty"`
	MakerProtocolFee uint64 `protobuf:"varint,6,opt,name=makerProtocolFee,proto3" json:"makerProtocolFee,omitempty"`
	TakerProtocolFee uint64 `protobuf:"varint,7,opt,name=takerProtocolFee,proto3" json:"takerProtocolFee,omitempty"`
	FeeRecipient     string `protobuf:"bytes,8,opt,name=feeRecipient,proto3" json:"feeRecipient,omitempty"`
	// 1 ProtocolFee 2 SplitFee
	FeeMethod int32 `protobuf:"varint,9,opt,name=feeMethod,proto3" json:"feeMethod,omitempty"`
	// 1 buy 2 sell
	Side int32 `protobuf:"varint,10,opt,name=side,proto3" json:"side,omitempty"`
	// 1 FixedPrice 2 DutchAuction
	SaleKind        int32      `protobuf:"varint,11,opt,name=saleKind,proto3" json:"saleKind,omitempty"`
	CollectionId    string     `protobuf:"bytes,12,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	TokenId         string     `protobuf:"bytes,13,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	BasePrice       types.Coin `protobuf:"bytes,14,opt,name=basePrice,proto3" json:"basePrice"`
	ExtraPrice      types.Coin `protobuf:"bytes,15,opt,name=extraPrice,proto3" json:"extraPrice"`
	ListingBlock    uint64     `protobuf:"varint,16,opt,name=listingBlock,proto3" json:"listingBlock,omitempty"`
	ExpirationBlock uint64     `protobuf:"varint,17,opt,name=expirationBlock,proto3" json:"expirationBlock,omitempty"`
	Salt            uint64     `protobuf:"varint,18,opt,name=salt,proto3" json:"salt,omitempty"`
	// 0 process 1 approved 2 cancel 3 finalized
	Status  int32  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	Creator string `protobuf:"bytes,20,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c6375df0c4a1904, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Order) GetMaker() string {
	if m != nil {
		return m.Maker
	}
	return ""
}

func (m *Order) GetTaker() string {
	if m != nil {
		return m.Taker
	}
	return ""
}

func (m *Order) GetMakerRelayerFee() uint64 {
	if m != nil {
		return m.MakerRelayerFee
	}
	return 0
}

func (m *Order) GetTakerRelayerFee() uint64 {
	if m != nil {
		return m.TakerRelayerFee
	}
	return 0
}

func (m *Order) GetMakerProtocolFee() uint64 {
	if m != nil {
		return m.MakerProtocolFee
	}
	return 0
}

func (m *Order) GetTakerProtocolFee() uint64 {
	if m != nil {
		return m.TakerProtocolFee
	}
	return 0
}

func (m *Order) GetFeeRecipient() string {
	if m != nil {
		return m.FeeRecipient
	}
	return ""
}

func (m *Order) GetFeeMethod() int32 {
	if m != nil {
		return m.FeeMethod
	}
	return 0
}

func (m *Order) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *Order) GetSaleKind() int32 {
	if m != nil {
		return m.SaleKind
	}
	return 0
}

func (m *Order) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *Order) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *Order) GetBasePrice() types.Coin {
	if m != nil {
		return m.BasePrice
	}
	return types.Coin{}
}

func (m *Order) GetExtraPrice() types.Coin {
	if m != nil {
		return m.ExtraPrice
	}
	return types.Coin{}
}

func (m *Order) GetListingBlock() uint64 {
	if m != nil {
		return m.ListingBlock
	}
	return 0
}

func (m *Order) GetExpirationBlock() uint64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *Order) GetSalt() uint64 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *Order) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Order)(nil), "deaswang.nft.market.Order")
}

func init() { proto.RegisterFile("market/order.proto", fileDescriptor_8c6375df0c4a1904) }

var fileDescriptor_8c6375df0c4a1904 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x88, 0xd3, 0x66, 0x5b, 0x68, 0xd9, 0x46, 0x68, 0x89, 0x90, 0x89, 0x7a, 0x40,
	0x16, 0x07, 0x5b, 0x85, 0x33, 0x02, 0x05, 0x09, 0x09, 0x21, 0x44, 0xe5, 0x23, 0xb7, 0xcd, 0x7a,
	0xe2, 0xac, 0xe2, 0x78, 0xa3, 0xdd, 0x29, 0xa4, 0x6f, 0xc1, 0xdb, 0xf0, 0x0a, 0x3d, 0xf6, 0xc8,
	0x09, 0xa1, 0xe4, 0x45, 0xd0, 0xce, 0xa6, 0xb4, 0x31, 0x17, 0x6e, 0x33, 0xdf, 0xff, 0x8f, 0xbd,
	0xfb, 0x8f, 0x96, 0xf1, 0x85, 0xb4, 0x73, 0xc0, 0xdc, 0xd8, 0x12, 0x6c, 0xb6, 0xb4, 0x06, 0x0d,
	0x3f, 0x29, 0x41, 0xba, 0x6f, 0xb2, 0xa9, 0xb2, 0x66, 0x8a, 0x59, 0x30, 0x0c, 0x07, 0x95, 0xa9,
	0x0c, 0xe9, 0xb9, 0xaf, 0x82, 0x75, 0x98, 0x28, 0xe3, 0x16, 0xc6, 0xe5, 0x13, 0xe9, 0x20, 0xff,
	0x7a, 0x36, 0x01, 0x94, 0x67, 0xb9, 0x32, 0xba, 0x09, 0xfa, 0xe9, 0x8f, 0x98, 0xc5, 0x9f, 0xfd,
	0xa7, 0x39, 0x67, 0xdd, 0x99, 0x74, 0x33, 0x11, 0x8d, 0xa2, 0xb4, 0x5f, 0x50, 0xcd, 0x07, 0x2c,
	0x5e, 0xc8, 0x39, 0x58, 0x71, 0x8f, 0x60, 0x68, 0x3c, 0x45, 0xa2, 0xf7, 0x03, 0xa5, 0x86, 0xa7,
	0xec, 0x88, 0xe4, 0x02, 0x6a, 0x79, 0x09, 0xf6, 0x3d, 0x80, 0xe8, 0x8e, 0xa2, 0xb4, 0x5b, 0xb4,
	0xb1, 0x77, 0x62, 0xcb, 0x19, 0x07, 0x67, 0x0b, 0xf3, 0x17, 0xec, 0x98, 0x86, 0xcf, 0xfd, 0x59,
	0x95, 0xa9, 0xbd, 0xb5, 0x47, 0xd6, 0x7f, 0xb8, 0xf7, 0x62, 0xdb, 0xbb, 0x17, 0xbc, 0x6d, 0xce,
	0x4f, 0xd9, 0xe1, 0x14, 0xa0, 0x00, 0xa5, 0x97, 0x1a, 0x1a, 0x14, 0xfb, 0x74, 0x91, 0x1d, 0xc6,
	0x9f, 0xb2, 0xfe, 0x14, 0xe0, 0x13, 0xe0, 0xcc, 0x94, 0xa2, 0x3f, 0x8a, 0xd2, 0xb8, 0xb8, 0x05,
	0x3e, 0x2d, 0xa7, 0x4b, 0x10, 0x8c, 0x04, 0xaa, 0xf9, 0x90, 0xed, 0x3b, 0x59, 0xc3, 0x47, 0xdd,
	0x94, 0xe2, 0x80, 0xf8, 0xdf, 0xde, 0xff, 0x51, 0x99, 0xba, 0x06, 0x85, 0xda, 0x34, 0x1f, 0x4a,
	0x71, 0x18, 0xfe, 0x78, 0x97, 0x71, 0xc1, 0xf6, 0xd0, 0xcc, 0xc1, 0xcb, 0x0f, 0x48, 0xbe, 0x69,
	0xf9, 0x6b, 0xd6, 0xf7, 0x0b, 0x3c, 0xb7, 0x5a, 0x81, 0x78, 0x38, 0x8a, 0xd2, 0x83, 0x97, 0x4f,
	0xb2, 0xb0, 0xd9, 0xcc, 0x0b, 0xd9, 0x76, 0xb3, 0xd9, 0x3b, 0xa3, 0x9b, 0x71, 0xf7, 0xea, 0xd7,
	0xb3, 0x4e, 0x71, 0x3b, 0xc1, 0xdf, 0x30, 0x06, 0x2b, 0xb4, 0x32, 0xcc, 0x1f, 0xfd, 0xdf, 0xfc,
	0x9d, 0x11, 0x7f, 0xfa, 0x5a, 0x3b, 0xd4, 0x4d, 0x35, 0xae, 0x8d, 0x9a, 0x8b, 0x63, 0xca, 0x75,
	0x87, 0xf9, 0xad, 0xc2, 0x6a, 0xa9, 0xad, 0xf4, 0xb7, 0x09, 0xb6, 0x47, 0x61, 0xab, 0x2d, 0x4c,
	0xd9, 0xc9, 0x1a, 0x05, 0x27, 0x99, 0x6a, 0xfe, 0x98, 0xf5, 0x1c, 0x4a, 0xbc, 0x70, 0xe2, 0x84,
	0x92, 0xdb, 0x76, 0x3e, 0x13, 0x65, 0x41, 0xa2, 0xb1, 0x62, 0x10, 0x32, 0xd9, 0xb6, 0xe3, 0xb7,
	0x57, 0xeb, 0x24, 0xba, 0x5e, 0x27, 0xd1, 0xef, 0x75, 0x12, 0x7d, 0xdf, 0x24, 0x9d, 0xeb, 0x4d,
	0xd2, 0xf9, 0xb9, 0x49, 0x3a, 0x5f, 0x9e, 0x57, 0x1a, 0x67, 0x17, 0x93, 0x4c, 0x99, 0x45, 0x7e,
	0xf3, 0x52, 0xf2, 0x66, 0x8a, 0xf9, 0x2a, 0xdf, 0x3e, 0x26, 0xbc, 0x5c, 0x82, 0x9b, 0xf4, 0xe8,
	0x09, 0xbc, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x21, 0x2b, 0xc8, 0x13, 0x63, 0x03, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Status != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Salt != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ListingBlock != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ListingBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size, err := m.ExtraPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.BasePrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x62
	}
	if m.SaleKind != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.SaleKind))
		i--
		dAtA[i] = 0x58
	}
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x50
	}
	if m.FeeMethod != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.FeeMethod))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FeeRecipient) > 0 {
		i -= len(m.FeeRecipient)
		copy(dAtA[i:], m.FeeRecipient)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.FeeRecipient)))
		i--
		dAtA[i] = 0x42
	}
	if m.TakerProtocolFee != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.TakerProtocolFee))
		i--
		dAtA[i] = 0x38
	}
	if m.MakerProtocolFee != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.MakerProtocolFee))
		i--
		dAtA[i] = 0x30
	}
	if m.TakerRelayerFee != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.TakerRelayerFee))
		i--
		dAtA[i] = 0x28
	}
	if m.MakerRelayerFee != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.MakerRelayerFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Maker) > 0 {
		i -= len(m.Maker)
		copy(dAtA[i:], m.Maker)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Maker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Maker)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.MakerRelayerFee != 0 {
		n += 1 + sovOrder(uint64(m.MakerRelayerFee))
	}
	if m.TakerRelayerFee != 0 {
		n += 1 + sovOrder(uint64(m.TakerRelayerFee))
	}
	if m.MakerProtocolFee != 0 {
		n += 1 + sovOrder(uint64(m.MakerProtocolFee))
	}
	if m.TakerProtocolFee != 0 {
		n += 1 + sovOrder(uint64(m.TakerProtocolFee))
	}
	l = len(m.FeeRecipient)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.FeeMethod != 0 {
		n += 1 + sovOrder(uint64(m.FeeMethod))
	}
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	if m.SaleKind != 0 {
		n += 1 + sovOrder(uint64(m.SaleKind))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = m.BasePrice.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.ExtraPrice.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.ListingBlock != 0 {
		n += 2 + sovOrder(uint64(m.ListingBlock))
	}
	if m.ExpirationBlock != 0 {
		n += 2 + sovOrder(uint64(m.ExpirationBlock))
	}
	if m.Salt != 0 {
		n += 2 + sovOrder(uint64(m.Salt))
	}
	if m.Status != 0 {
		n += 2 + sovOrder(uint64(m.Status))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerRelayerFee", wireType)
			}
			m.MakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerRelayerFee", wireType)
			}
			m.TakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerProtocolFee", wireType)
			}
			m.MakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerProtocolFee", wireType)
			}
			m.TakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMethod", wireType)
			}
			m.FeeMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeMethod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleKind", wireType)
			}
			m.SaleKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleKind |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtraPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingBlock", wireType)
			}
			m.ListingBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListingBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
