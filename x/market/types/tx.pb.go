// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateLootboxOption struct {
	Creator     string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxQuantity uint64  `protobuf:"varint,3,opt,name=maxQuantity,proto3" json:"maxQuantity,omitempty"`
	Probability []int32 `protobuf:"varint,4,rep,packed,name=probability,proto3" json:"probability,omitempty"`
	Guaranteed  bool    `protobuf:"varint,5,opt,name=guaranteed,proto3" json:"guaranteed,omitempty"`
	Guarantees  []int32 `protobuf:"varint,6,rep,packed,name=guarantees,proto3" json:"guarantees,omitempty"`
}

func (m *MsgCreateLootboxOption) Reset()         { *m = MsgCreateLootboxOption{} }
func (m *MsgCreateLootboxOption) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLootboxOption) ProtoMessage()    {}
func (*MsgCreateLootboxOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{0}
}
func (m *MsgCreateLootboxOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLootboxOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLootboxOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLootboxOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLootboxOption.Merge(m, src)
}
func (m *MsgCreateLootboxOption) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLootboxOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLootboxOption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLootboxOption proto.InternalMessageInfo

func (m *MsgCreateLootboxOption) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateLootboxOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateLootboxOption) GetMaxQuantity() uint64 {
	if m != nil {
		return m.MaxQuantity
	}
	return 0
}

func (m *MsgCreateLootboxOption) GetProbability() []int32 {
	if m != nil {
		return m.Probability
	}
	return nil
}

func (m *MsgCreateLootboxOption) GetGuaranteed() bool {
	if m != nil {
		return m.Guaranteed
	}
	return false
}

func (m *MsgCreateLootboxOption) GetGuarantees() []int32 {
	if m != nil {
		return m.Guarantees
	}
	return nil
}

type MsgCreateLootboxOptionResponse struct {
}

func (m *MsgCreateLootboxOptionResponse) Reset()         { *m = MsgCreateLootboxOptionResponse{} }
func (m *MsgCreateLootboxOptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLootboxOptionResponse) ProtoMessage()    {}
func (*MsgCreateLootboxOptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{1}
}
func (m *MsgCreateLootboxOptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLootboxOptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLootboxOptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLootboxOptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLootboxOptionResponse.Merge(m, src)
}
func (m *MsgCreateLootboxOptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLootboxOptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLootboxOptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLootboxOptionResponse proto.InternalMessageInfo

type MsgUpdateLootboxOption struct {
	Creator     string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxQuantity uint64  `protobuf:"varint,3,opt,name=maxQuantity,proto3" json:"maxQuantity,omitempty"`
	Probability []int32 `protobuf:"varint,4,rep,packed,name=probability,proto3" json:"probability,omitempty"`
	Guaranteed  bool    `protobuf:"varint,5,opt,name=guaranteed,proto3" json:"guaranteed,omitempty"`
	Guarantees  []int32 `protobuf:"varint,6,rep,packed,name=guarantees,proto3" json:"guarantees,omitempty"`
}

func (m *MsgUpdateLootboxOption) Reset()         { *m = MsgUpdateLootboxOption{} }
func (m *MsgUpdateLootboxOption) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLootboxOption) ProtoMessage()    {}
func (*MsgUpdateLootboxOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{2}
}
func (m *MsgUpdateLootboxOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLootboxOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLootboxOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLootboxOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLootboxOption.Merge(m, src)
}
func (m *MsgUpdateLootboxOption) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLootboxOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLootboxOption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLootboxOption proto.InternalMessageInfo

func (m *MsgUpdateLootboxOption) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateLootboxOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateLootboxOption) GetMaxQuantity() uint64 {
	if m != nil {
		return m.MaxQuantity
	}
	return 0
}

func (m *MsgUpdateLootboxOption) GetProbability() []int32 {
	if m != nil {
		return m.Probability
	}
	return nil
}

func (m *MsgUpdateLootboxOption) GetGuaranteed() bool {
	if m != nil {
		return m.Guaranteed
	}
	return false
}

func (m *MsgUpdateLootboxOption) GetGuarantees() []int32 {
	if m != nil {
		return m.Guarantees
	}
	return nil
}

type MsgUpdateLootboxOptionResponse struct {
}

func (m *MsgUpdateLootboxOptionResponse) Reset()         { *m = MsgUpdateLootboxOptionResponse{} }
func (m *MsgUpdateLootboxOptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLootboxOptionResponse) ProtoMessage()    {}
func (*MsgUpdateLootboxOptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{3}
}
func (m *MsgUpdateLootboxOptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLootboxOptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLootboxOptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLootboxOptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLootboxOptionResponse.Merge(m, src)
}
func (m *MsgUpdateLootboxOptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLootboxOptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLootboxOptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLootboxOptionResponse proto.InternalMessageInfo

type MsgCreateOrder struct {
	Creator          string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Maker            string     `protobuf:"bytes,2,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker            string     `protobuf:"bytes,3,opt,name=taker,proto3" json:"taker,omitempty"`
	MakerRelayerFee  uint64     `protobuf:"varint,4,opt,name=makerRelayerFee,proto3" json:"makerRelayerFee,omitempty"`
	TakerRelayerFee  uint64     `protobuf:"varint,5,opt,name=takerRelayerFee,proto3" json:"takerRelayerFee,omitempty"`
	MakerProtocolFee uint64     `protobuf:"varint,6,opt,name=makerProtocolFee,proto3" json:"makerProtocolFee,omitempty"`
	TakerProtocolFee uint64     `protobuf:"varint,7,opt,name=takerProtocolFee,proto3" json:"takerProtocolFee,omitempty"`
	FeeRecipient     string     `protobuf:"bytes,8,opt,name=feeRecipient,proto3" json:"feeRecipient,omitempty"`
	FeeMethod        int32      `protobuf:"varint,9,opt,name=feeMethod,proto3" json:"feeMethod,omitempty"`
	Side             int32      `protobuf:"varint,10,opt,name=side,proto3" json:"side,omitempty"`
	SaleKind         int32      `protobuf:"varint,11,opt,name=saleKind,proto3" json:"saleKind,omitempty"`
	CollectionId     string     `protobuf:"bytes,12,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	TokenId          string     `protobuf:"bytes,13,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	BasePrice        types.Coin `protobuf:"bytes,14,opt,name=basePrice,proto3" json:"basePrice"`
	ExtraPrice       types.Coin `protobuf:"bytes,15,opt,name=extraPrice,proto3" json:"extraPrice"`
	ListingBlock     uint64     `protobuf:"varint,16,opt,name=listingBlock,proto3" json:"listingBlock,omitempty"`
	ExpirationBlock  uint64     `protobuf:"varint,17,opt,name=expirationBlock,proto3" json:"expirationBlock,omitempty"`
	Salt             uint64     `protobuf:"varint,18,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *MsgCreateOrder) Reset()         { *m = MsgCreateOrder{} }
func (m *MsgCreateOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOrder) ProtoMessage()    {}
func (*MsgCreateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{4}
}
func (m *MsgCreateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOrder.Merge(m, src)
}
func (m *MsgCreateOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOrder proto.InternalMessageInfo

func (m *MsgCreateOrder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateOrder) GetMaker() string {
	if m != nil {
		return m.Maker
	}
	return ""
}

func (m *MsgCreateOrder) GetTaker() string {
	if m != nil {
		return m.Taker
	}
	return ""
}

func (m *MsgCreateOrder) GetMakerRelayerFee() uint64 {
	if m != nil {
		return m.MakerRelayerFee
	}
	return 0
}

func (m *MsgCreateOrder) GetTakerRelayerFee() uint64 {
	if m != nil {
		return m.TakerRelayerFee
	}
	return 0
}

func (m *MsgCreateOrder) GetMakerProtocolFee() uint64 {
	if m != nil {
		return m.MakerProtocolFee
	}
	return 0
}

func (m *MsgCreateOrder) GetTakerProtocolFee() uint64 {
	if m != nil {
		return m.TakerProtocolFee
	}
	return 0
}

func (m *MsgCreateOrder) GetFeeRecipient() string {
	if m != nil {
		return m.FeeRecipient
	}
	return ""
}

func (m *MsgCreateOrder) GetFeeMethod() int32 {
	if m != nil {
		return m.FeeMethod
	}
	return 0
}

func (m *MsgCreateOrder) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *MsgCreateOrder) GetSaleKind() int32 {
	if m != nil {
		return m.SaleKind
	}
	return 0
}

func (m *MsgCreateOrder) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgCreateOrder) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgCreateOrder) GetBasePrice() types.Coin {
	if m != nil {
		return m.BasePrice
	}
	return types.Coin{}
}

func (m *MsgCreateOrder) GetExtraPrice() types.Coin {
	if m != nil {
		return m.ExtraPrice
	}
	return types.Coin{}
}

func (m *MsgCreateOrder) GetListingBlock() uint64 {
	if m != nil {
		return m.ListingBlock
	}
	return 0
}

func (m *MsgCreateOrder) GetExpirationBlock() uint64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *MsgCreateOrder) GetSalt() uint64 {
	if m != nil {
		return m.Salt
	}
	return 0
}

type MsgCreateOrderResponse struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgCreateOrderResponse) Reset()         { *m = MsgCreateOrderResponse{} }
func (m *MsgCreateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOrderResponse) ProtoMessage()    {}
func (*MsgCreateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{5}
}
func (m *MsgCreateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOrderResponse.Merge(m, src)
}
func (m *MsgCreateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOrderResponse proto.InternalMessageInfo

func (m *MsgCreateOrderResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type MsgUpdateOrder struct {
	Creator          string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Hash             string     `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Maker            string     `protobuf:"bytes,3,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker            string     `protobuf:"bytes,4,opt,name=taker,proto3" json:"taker,omitempty"`
	MakerRelayerFee  uint64     `protobuf:"varint,5,opt,name=makerRelayerFee,proto3" json:"makerRelayerFee,omitempty"`
	TakerRelayerFee  uint64     `protobuf:"varint,6,opt,name=takerRelayerFee,proto3" json:"takerRelayerFee,omitempty"`
	MakerProtocolFee uint64     `protobuf:"varint,7,opt,name=makerProtocolFee,proto3" json:"makerProtocolFee,omitempty"`
	TakerProtocolFee uint64     `protobuf:"varint,8,opt,name=takerProtocolFee,proto3" json:"takerProtocolFee,omitempty"`
	FeeRecipient     string     `protobuf:"bytes,9,opt,name=feeRecipient,proto3" json:"feeRecipient,omitempty"`
	FeeMethod        int32      `protobuf:"varint,10,opt,name=feeMethod,proto3" json:"feeMethod,omitempty"`
	Side             int32      `protobuf:"varint,11,opt,name=side,proto3" json:"side,omitempty"`
	SaleKind         int32      `protobuf:"varint,12,opt,name=saleKind,proto3" json:"saleKind,omitempty"`
	CollectionId     string     `protobuf:"bytes,13,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	TokenId          string     `protobuf:"bytes,14,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	BasePrice        types.Coin `protobuf:"bytes,15,opt,name=basePrice,proto3" json:"basePrice"`
	ExtraPrice       types.Coin `protobuf:"bytes,16,opt,name=extraPrice,proto3" json:"extraPrice"`
	ListingBlock     uint64     `protobuf:"varint,17,opt,name=listingBlock,proto3" json:"listingBlock,omitempty"`
	ExpirationBlock  uint64     `protobuf:"varint,18,opt,name=expirationBlock,proto3" json:"expirationBlock,omitempty"`
	Salt             uint64     `protobuf:"varint,19,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *MsgUpdateOrder) Reset()         { *m = MsgUpdateOrder{} }
func (m *MsgUpdateOrder) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOrder) ProtoMessage()    {}
func (*MsgUpdateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{6}
}
func (m *MsgUpdateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOrder.Merge(m, src)
}
func (m *MsgUpdateOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOrder proto.InternalMessageInfo

func (m *MsgUpdateOrder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateOrder) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *MsgUpdateOrder) GetMaker() string {
	if m != nil {
		return m.Maker
	}
	return ""
}

func (m *MsgUpdateOrder) GetTaker() string {
	if m != nil {
		return m.Taker
	}
	return ""
}

func (m *MsgUpdateOrder) GetMakerRelayerFee() uint64 {
	if m != nil {
		return m.MakerRelayerFee
	}
	return 0
}

func (m *MsgUpdateOrder) GetTakerRelayerFee() uint64 {
	if m != nil {
		return m.TakerRelayerFee
	}
	return 0
}

func (m *MsgUpdateOrder) GetMakerProtocolFee() uint64 {
	if m != nil {
		return m.MakerProtocolFee
	}
	return 0
}

func (m *MsgUpdateOrder) GetTakerProtocolFee() uint64 {
	if m != nil {
		return m.TakerProtocolFee
	}
	return 0
}

func (m *MsgUpdateOrder) GetFeeRecipient() string {
	if m != nil {
		return m.FeeRecipient
	}
	return ""
}

func (m *MsgUpdateOrder) GetFeeMethod() int32 {
	if m != nil {
		return m.FeeMethod
	}
	return 0
}

func (m *MsgUpdateOrder) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *MsgUpdateOrder) GetSaleKind() int32 {
	if m != nil {
		return m.SaleKind
	}
	return 0
}

func (m *MsgUpdateOrder) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateOrder) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgUpdateOrder) GetBasePrice() types.Coin {
	if m != nil {
		return m.BasePrice
	}
	return types.Coin{}
}

func (m *MsgUpdateOrder) GetExtraPrice() types.Coin {
	if m != nil {
		return m.ExtraPrice
	}
	return types.Coin{}
}

func (m *MsgUpdateOrder) GetListingBlock() uint64 {
	if m != nil {
		return m.ListingBlock
	}
	return 0
}

func (m *MsgUpdateOrder) GetExpirationBlock() uint64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *MsgUpdateOrder) GetSalt() uint64 {
	if m != nil {
		return m.Salt
	}
	return 0
}

type MsgUpdateOrderResponse struct {
}

func (m *MsgUpdateOrderResponse) Reset()         { *m = MsgUpdateOrderResponse{} }
func (m *MsgUpdateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOrderResponse) ProtoMessage()    {}
func (*MsgUpdateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{7}
}
func (m *MsgUpdateOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOrderResponse.Merge(m, src)
}
func (m *MsgUpdateOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOrderResponse proto.InternalMessageInfo

type MsgCancelOrder struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Hash    string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgCancelOrder) Reset()         { *m = MsgCancelOrder{} }
func (m *MsgCancelOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrder) ProtoMessage()    {}
func (*MsgCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{8}
}
func (m *MsgCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrder.Merge(m, src)
}
func (m *MsgCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrder proto.InternalMessageInfo

func (m *MsgCancelOrder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelOrder) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type MsgCancelOrderResponse struct {
}

func (m *MsgCancelOrderResponse) Reset()         { *m = MsgCancelOrderResponse{} }
func (m *MsgCancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrderResponse) ProtoMessage()    {}
func (*MsgCancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{9}
}
func (m *MsgCancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrderResponse.Merge(m, src)
}
func (m *MsgCancelOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrderResponse proto.InternalMessageInfo

type MsgMatch struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Buy     string `protobuf:"bytes,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell    string `protobuf:"bytes,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (m *MsgMatch) Reset()         { *m = MsgMatch{} }
func (m *MsgMatch) String() string { return proto.CompactTextString(m) }
func (*MsgMatch) ProtoMessage()    {}
func (*MsgMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{10}
}
func (m *MsgMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatch.Merge(m, src)
}
func (m *MsgMatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatch proto.InternalMessageInfo

func (m *MsgMatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMatch) GetBuy() string {
	if m != nil {
		return m.Buy
	}
	return ""
}

func (m *MsgMatch) GetSell() string {
	if m != nil {
		return m.Sell
	}
	return ""
}

type MsgMatchResponse struct {
}

func (m *MsgMatchResponse) Reset()         { *m = MsgMatchResponse{} }
func (m *MsgMatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMatchResponse) ProtoMessage()    {}
func (*MsgMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{11}
}
func (m *MsgMatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatchResponse.Merge(m, src)
}
func (m *MsgMatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatchResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLootboxOption)(nil), "deaswang.nft.market.MsgCreateLootboxOption")
	proto.RegisterType((*MsgCreateLootboxOptionResponse)(nil), "deaswang.nft.market.MsgCreateLootboxOptionResponse")
	proto.RegisterType((*MsgUpdateLootboxOption)(nil), "deaswang.nft.market.MsgUpdateLootboxOption")
	proto.RegisterType((*MsgUpdateLootboxOptionResponse)(nil), "deaswang.nft.market.MsgUpdateLootboxOptionResponse")
	proto.RegisterType((*MsgCreateOrder)(nil), "deaswang.nft.market.MsgCreateOrder")
	proto.RegisterType((*MsgCreateOrderResponse)(nil), "deaswang.nft.market.MsgCreateOrderResponse")
	proto.RegisterType((*MsgUpdateOrder)(nil), "deaswang.nft.market.MsgUpdateOrder")
	proto.RegisterType((*MsgUpdateOrderResponse)(nil), "deaswang.nft.market.MsgUpdateOrderResponse")
	proto.RegisterType((*MsgCancelOrder)(nil), "deaswang.nft.market.MsgCancelOrder")
	proto.RegisterType((*MsgCancelOrderResponse)(nil), "deaswang.nft.market.MsgCancelOrderResponse")
	proto.RegisterType((*MsgMatch)(nil), "deaswang.nft.market.MsgMatch")
	proto.RegisterType((*MsgMatchResponse)(nil), "deaswang.nft.market.MsgMatchResponse")
}

func init() { proto.RegisterFile("market/tx.proto", fileDescriptor_2966ca2342567dca) }

var fileDescriptor_2966ca2342567dca = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xcd, 0x8e, 0xdb, 0x36,
	0x10, 0xc7, 0xad, 0xd8, 0xf2, 0xda, 0xf4, 0x66, 0xd7, 0xa1, 0x83, 0x82, 0x75, 0x5b, 0x55, 0x70,
	0xd1, 0xc2, 0x68, 0x0a, 0x09, 0x49, 0xce, 0xfd, 0xc0, 0x06, 0x28, 0xd0, 0x0f, 0x23, 0xa9, 0x80,
	0x5e, 0x7a, 0x09, 0x28, 0x69, 0x2c, 0x0b, 0x96, 0x45, 0x41, 0xa2, 0xbb, 0xf6, 0x1b, 0xf4, 0xd8,
	0x43, 0x1f, 0xa2, 0x8f, 0x12, 0xf4, 0x94, 0x63, 0x4f, 0x45, 0xb1, 0xfb, 0x22, 0x05, 0x49, 0xc9,
	0x96, 0x1d, 0x59, 0x76, 0xba, 0xb7, 0xdc, 0xc8, 0xff, 0xfc, 0x39, 0xa3, 0x11, 0x7f, 0x12, 0x89,
	0x2e, 0x17, 0x34, 0x9d, 0x03, 0xb7, 0xf9, 0xca, 0x4a, 0x52, 0xc6, 0x19, 0x1e, 0xf8, 0x40, 0xb3,
	0x6b, 0x1a, 0x07, 0x56, 0x3c, 0xe5, 0x96, 0x8a, 0x0e, 0x3f, 0xc8, 0x5d, 0x11, 0x63, 0xdc, 0x65,
	0xab, 0x97, 0x2c, 0xe1, 0x21, 0x8b, 0xd5, 0x8a, 0x21, 0xce, 0x83, 0x2c, 0xf5, 0x21, 0xcd, 0xb5,
	0x87, 0x01, 0x0b, 0x98, 0x1c, 0xda, 0x62, 0x94, 0xab, 0x86, 0xc7, 0xb2, 0x05, 0xcb, 0x6c, 0x97,
	0x66, 0x60, 0xff, 0xfa, 0xd8, 0x05, 0x4e, 0x1f, 0xdb, 0x1e, 0x0b, 0xf3, 0x4c, 0xa3, 0xbf, 0x34,
	0xf4, 0xde, 0x24, 0x0b, 0x9e, 0xa5, 0x40, 0x39, 0xfc, 0xa8, 0x6a, 0x3d, 0x97, 0xa5, 0x30, 0x41,
	0x67, 0x9e, 0x90, 0x59, 0x4a, 0x34, 0x53, 0x1b, 0x77, 0x9d, 0x62, 0x8a, 0x31, 0x6a, 0xc5, 0x74,
	0x01, 0xe4, 0x9e, 0x94, 0xe5, 0x18, 0x9b, 0xa8, 0xb7, 0xa0, 0xab, 0x9f, 0x96, 0x34, 0xe6, 0x21,
	0x5f, 0x93, 0xa6, 0xa9, 0x8d, 0x5b, 0x4e, 0x59, 0x12, 0x8e, 0x24, 0x65, 0x2e, 0x75, 0xc3, 0x48,
	0x38, 0x5a, 0x66, 0x73, 0xac, 0x3b, 0x65, 0x09, 0x1b, 0x08, 0x05, 0x4b, 0x9a, 0xd2, 0x98, 0x03,
	0xf8, 0x44, 0x37, 0xb5, 0x71, 0xc7, 0x29, 0x29, 0x3b, 0xf1, 0x8c, 0xb4, 0x65, 0x82, 0x92, 0x32,
	0x32, 0x91, 0x51, 0xdd, 0x8b, 0x03, 0x59, 0xc2, 0xe2, 0x0c, 0x8a, 0x76, 0x7f, 0x4e, 0xfc, 0x77,
	0xa6, 0xdd, 0x8a, 0x5e, 0x36, 0xed, 0xfe, 0xa1, 0xa3, 0x8b, 0xcd, 0x1b, 0x79, 0x2e, 0x60, 0xa9,
	0x69, 0xf3, 0x21, 0xd2, 0x17, 0x74, 0x0e, 0x69, 0xde, 0xa7, 0x9a, 0x08, 0x95, 0x4b, 0xb5, 0xa9,
	0x54, 0x39, 0xc1, 0x63, 0x41, 0xf1, 0x1c, 0x52, 0x07, 0x22, 0xba, 0x86, 0xf4, 0x5b, 0x00, 0xd2,
	0x92, 0xaf, 0x60, 0x5f, 0x16, 0x4e, 0xbe, 0xe7, 0xd4, 0x95, 0x73, 0x4f, 0xc6, 0x9f, 0xa3, 0xbe,
	0x5c, 0xfc, 0x42, 0x80, 0xe9, 0xb1, 0x48, 0x58, 0xdb, 0xd2, 0xfa, 0x86, 0x2e, 0xbc, 0x7c, 0xdf,
	0x7b, 0xa6, 0xbc, 0xfb, 0x3a, 0x1e, 0xa1, 0xf3, 0x29, 0x80, 0x03, 0x5e, 0x98, 0x84, 0x10, 0x73,
	0xd2, 0x91, 0x8d, 0xec, 0x68, 0xf8, 0x43, 0xd4, 0x9d, 0x02, 0x4c, 0x80, 0xcf, 0x98, 0x4f, 0xba,
	0xa6, 0x36, 0xd6, 0x9d, 0xad, 0x20, 0x00, 0xc8, 0x42, 0x1f, 0x08, 0x92, 0x01, 0x39, 0xc6, 0x43,
	0xd4, 0xc9, 0x68, 0x04, 0x3f, 0x84, 0xb1, 0x4f, 0x7a, 0x52, 0xdf, 0xcc, 0x45, 0x45, 0x8f, 0x45,
	0x11, 0x78, 0x62, 0x33, 0xbe, 0xf3, 0xc9, 0xb9, 0xaa, 0x58, 0xd6, 0xc4, 0x3e, 0x70, 0x36, 0x07,
	0x11, 0xbe, 0xaf, 0xf6, 0x21, 0x9f, 0xe2, 0x2f, 0x51, 0x57, 0x7c, 0xad, 0x2f, 0xd2, 0xd0, 0x03,
	0x72, 0x61, 0x6a, 0xe3, 0xde, 0x93, 0xf7, 0x2d, 0xf5, 0x19, 0x5b, 0x22, 0x60, 0xe5, 0x9f, 0xb1,
	0xf5, 0x8c, 0x85, 0xf1, 0x55, 0xeb, 0xd5, 0x3f, 0x1f, 0x37, 0x9c, 0xed, 0x0a, 0xfc, 0x35, 0x42,
	0xb0, 0xe2, 0x29, 0x55, 0xeb, 0x2f, 0x4f, 0x5b, 0x5f, 0x5a, 0x22, 0x9e, 0x3e, 0x0a, 0x33, 0x1e,
	0xc6, 0xc1, 0x55, 0xc4, 0xbc, 0x39, 0xe9, 0xcb, 0xf7, 0xba, 0xa3, 0x89, 0x5d, 0x85, 0x55, 0x12,
	0xa6, 0x54, 0x74, 0xa3, 0x6c, 0x0f, 0xd4, 0xae, 0xee, 0xc9, 0xf2, 0xdd, 0xd1, 0x88, 0x13, 0x2c,
	0xc3, 0x72, 0x3c, 0xfa, 0xa2, 0xf4, 0xcf, 0x91, 0x54, 0x16, 0xc0, 0x0a, 0xf7, 0x8c, 0x66, 0xb3,
	0x1c, 0x4d, 0x39, 0x1e, 0xfd, 0xa9, 0x20, 0x56, 0x9c, 0x1f, 0x83, 0xb8, 0x48, 0x70, 0x6f, 0x9b,
	0x60, 0x0b, 0x76, 0xb3, 0x12, 0xec, 0xd6, 0x11, 0xb0, 0xf5, 0x93, 0xc1, 0x6e, 0x9f, 0x0e, 0xf6,
	0xd9, 0x5b, 0x80, 0xdd, 0x39, 0x11, 0xec, 0xee, 0x31, 0xb0, 0xd1, 0x21, 0xb0, 0x7b, 0x07, 0xc0,
	0x3e, 0x3f, 0x02, 0xf6, 0xfd, 0x7a, 0xb0, 0x2f, 0x6a, 0xc0, 0xbe, 0xbc, 0x23, 0xd8, 0xfd, 0xbb,
	0x83, 0xfd, 0xe0, 0x34, 0xb0, 0x71, 0x3d, 0xd8, 0x83, 0x12, 0xd8, 0xa4, 0x74, 0xba, 0xec, 0x80,
	0x3d, 0xfa, 0x4a, 0xfd, 0x88, 0x69, 0xec, 0x41, 0xf4, 0x3f, 0x18, 0xce, 0x33, 0x97, 0xd6, 0x6f,
	0x32, 0x7f, 0x8f, 0x3a, 0x93, 0x2c, 0x98, 0x50, 0xee, 0xcd, 0x6a, 0x72, 0xf6, 0x51, 0xd3, 0x5d,
	0xae, 0xf3, 0x94, 0x62, 0x28, 0x9f, 0x1f, 0xa2, 0x28, 0xff, 0x28, 0xe4, 0x78, 0x84, 0x51, 0xbf,
	0xc8, 0x55, 0xe4, 0x7f, 0xf2, 0x5b, 0x0b, 0x35, 0x27, 0x59, 0x80, 0xaf, 0xd1, 0xa0, 0xea, 0x96,
	0xf0, 0xc8, 0xaa, 0xb8, 0xbd, 0x58, 0xd5, 0xc7, 0xf0, 0xf0, 0xe9, 0x5b, 0x98, 0x37, 0xff, 0x84,
	0x6b, 0x34, 0xa8, 0x3a, 0xaf, 0x0f, 0x16, 0xae, 0x30, 0x1f, 0x2e, 0x5c, 0x73, 0x7a, 0xe2, 0x97,
	0xa8, 0x57, 0x3e, 0x39, 0x3f, 0xa9, 0x7f, 0x78, 0x69, 0x1a, 0x3e, 0x3a, 0xc1, 0xb4, 0x53, 0xa0,
	0x44, 0xc4, 0xe1, 0x02, 0x5b, 0x53, 0x4d, 0x81, 0x37, 0xd9, 0xc0, 0x13, 0xa4, 0x2b, 0x30, 0x3e,
	0x3a, 0xb4, 0x4a, 0x86, 0x87, 0x9f, 0xd6, 0x86, 0x8b, 0x74, 0x57, 0xdf, 0xbc, 0xba, 0x31, 0xb4,
	0xd7, 0x37, 0x86, 0xf6, 0xef, 0x8d, 0xa1, 0xfd, 0x7e, 0x6b, 0x34, 0x5e, 0xdf, 0x1a, 0x8d, 0xbf,
	0x6f, 0x8d, 0xc6, 0x2f, 0x9f, 0x05, 0x21, 0x9f, 0x2d, 0x5d, 0xcb, 0x63, 0x0b, 0xbb, 0x48, 0x65,
	0xc7, 0x53, 0x6e, 0xaf, 0xec, 0xe2, 0xb6, 0xbb, 0x4e, 0x20, 0x73, 0xdb, 0xf2, 0xd6, 0xf9, 0xf4,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x9f, 0x64, 0x75, 0x04, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateLootboxOption(ctx context.Context, in *MsgCreateLootboxOption, opts ...grpc.CallOption) (*MsgCreateLootboxOptionResponse, error)
	UpdateLootboxOption(ctx context.Context, in *MsgUpdateLootboxOption, opts ...grpc.CallOption) (*MsgUpdateLootboxOptionResponse, error)
	// rpc DeleteLootboxOption(MsgDeleteLootboxOption) returns (MsgDeleteLootboxOptionResponse);
	CreateOrder(ctx context.Context, in *MsgCreateOrder, opts ...grpc.CallOption) (*MsgCreateOrderResponse, error)
	// rpc UpdateOrder(MsgUpdateOrder) returns (MsgUpdateOrderResponse);
	CancelOrder(ctx context.Context, in *MsgCancelOrder, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error)
	Match(ctx context.Context, in *MsgMatch, opts ...grpc.CallOption) (*MsgMatchResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateLootboxOption(ctx context.Context, in *MsgCreateLootboxOption, opts ...grpc.CallOption) (*MsgCreateLootboxOptionResponse, error) {
	out := new(MsgCreateLootboxOptionResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.market.Msg/CreateLootboxOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLootboxOption(ctx context.Context, in *MsgUpdateLootboxOption, opts ...grpc.CallOption) (*MsgUpdateLootboxOptionResponse, error) {
	out := new(MsgUpdateLootboxOptionResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.market.Msg/UpdateLootboxOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOrder(ctx context.Context, in *MsgCreateOrder, opts ...grpc.CallOption) (*MsgCreateOrderResponse, error) {
	out := new(MsgCreateOrderResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.market.Msg/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOrder(ctx context.Context, in *MsgCancelOrder, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error) {
	out := new(MsgCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.market.Msg/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Match(ctx context.Context, in *MsgMatch, opts ...grpc.CallOption) (*MsgMatchResponse, error) {
	out := new(MsgMatchResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.market.Msg/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateLootboxOption(context.Context, *MsgCreateLootboxOption) (*MsgCreateLootboxOptionResponse, error)
	UpdateLootboxOption(context.Context, *MsgUpdateLootboxOption) (*MsgUpdateLootboxOptionResponse, error)
	// rpc DeleteLootboxOption(MsgDeleteLootboxOption) returns (MsgDeleteLootboxOptionResponse);
	CreateOrder(context.Context, *MsgCreateOrder) (*MsgCreateOrderResponse, error)
	// rpc UpdateOrder(MsgUpdateOrder) returns (MsgUpdateOrderResponse);
	CancelOrder(context.Context, *MsgCancelOrder) (*MsgCancelOrderResponse, error)
	Match(context.Context, *MsgMatch) (*MsgMatchResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateLootboxOption(ctx context.Context, req *MsgCreateLootboxOption) (*MsgCreateLootboxOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLootboxOption not implemented")
}
func (*UnimplementedMsgServer) UpdateLootboxOption(ctx context.Context, req *MsgUpdateLootboxOption) (*MsgUpdateLootboxOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLootboxOption not implemented")
}
func (*UnimplementedMsgServer) CreateOrder(ctx context.Context, req *MsgCreateOrder) (*MsgCreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedMsgServer) CancelOrder(ctx context.Context, req *MsgCancelOrder) (*MsgCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedMsgServer) Match(ctx context.Context, req *MsgMatch) (*MsgMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateLootboxOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLootboxOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLootboxOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.market.Msg/CreateLootboxOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLootboxOption(ctx, req.(*MsgCreateLootboxOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLootboxOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLootboxOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLootboxOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.market.Msg/UpdateLootboxOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLootboxOption(ctx, req.(*MsgUpdateLootboxOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.market.Msg/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOrder(ctx, req.(*MsgCreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.market.Msg/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOrder(ctx, req.(*MsgCancelOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.market.Msg/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Match(ctx, req.(*MsgMatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deaswang.nft.market.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLootboxOption",
			Handler:    _Msg_CreateLootboxOption_Handler,
		},
		{
			MethodName: "UpdateLootboxOption",
			Handler:    _Msg_UpdateLootboxOption_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Msg_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Msg_CancelOrder_Handler,
		},
		{
			MethodName: "Match",
			Handler:    _Msg_Match_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/tx.proto",
}

func (m *MsgCreateLootboxOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLootboxOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLootboxOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Guarantees) > 0 {
		dAtA2 := make([]byte, len(m.Guarantees)*10)
		var j1 int
		for _, num1 := range m.Guarantees {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.Guaranteed {
		i--
		if m.Guaranteed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Probability) > 0 {
		dAtA4 := make([]byte, len(m.Probability)*10)
		var j3 int
		for _, num1 := range m.Probability {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxQuantity != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxQuantity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLootboxOptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLootboxOptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLootboxOptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLootboxOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLootboxOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLootboxOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Guarantees) > 0 {
		dAtA6 := make([]byte, len(m.Guarantees)*10)
		var j5 int
		for _, num1 := range m.Guarantees {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTx(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if m.Guaranteed {
		i--
		if m.Guaranteed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Probability) > 0 {
		dAtA8 := make([]byte, len(m.Probability)*10)
		var j7 int
		for _, num1 := range m.Probability {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTx(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxQuantity != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxQuantity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLootboxOptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLootboxOptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLootboxOptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Salt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ListingBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ListingBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size, err := m.ExtraPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.BasePrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x62
	}
	if m.SaleKind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleKind))
		i--
		dAtA[i] = 0x58
	}
	if m.Side != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x50
	}
	if m.FeeMethod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeMethod))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FeeRecipient) > 0 {
		i -= len(m.FeeRecipient)
		copy(dAtA[i:], m.FeeRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeRecipient)))
		i--
		dAtA[i] = 0x42
	}
	if m.TakerProtocolFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TakerProtocolFee))
		i--
		dAtA[i] = 0x38
	}
	if m.MakerProtocolFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MakerProtocolFee))
		i--
		dAtA[i] = 0x30
	}
	if m.TakerRelayerFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TakerRelayerFee))
		i--
		dAtA[i] = 0x28
	}
	if m.MakerRelayerFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MakerRelayerFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Maker) > 0 {
		i -= len(m.Maker)
		copy(dAtA[i:], m.Maker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Maker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Salt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ListingBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ListingBlock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size, err := m.ExtraPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.BasePrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SaleKind != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleKind))
		i--
		dAtA[i] = 0x60
	}
	if m.Side != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x58
	}
	if m.FeeMethod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeMethod))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FeeRecipient) > 0 {
		i -= len(m.FeeRecipient)
		copy(dAtA[i:], m.FeeRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeRecipient)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TakerProtocolFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TakerProtocolFee))
		i--
		dAtA[i] = 0x40
	}
	if m.MakerProtocolFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MakerProtocolFee))
		i--
		dAtA[i] = 0x38
	}
	if m.TakerRelayerFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TakerRelayerFee))
		i--
		dAtA[i] = 0x30
	}
	if m.MakerRelayerFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MakerRelayerFee))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Maker) > 0 {
		i -= len(m.Maker)
		copy(dAtA[i:], m.Maker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Maker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sell) > 0 {
		i -= len(m.Sell)
		copy(dAtA[i:], m.Sell)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sell)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Buy) > 0 {
		i -= len(m.Buy)
		copy(dAtA[i:], m.Buy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLootboxOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxQuantity != 0 {
		n += 1 + sovTx(uint64(m.MaxQuantity))
	}
	if len(m.Probability) > 0 {
		l = 0
		for _, e := range m.Probability {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.Guaranteed {
		n += 2
	}
	if len(m.Guarantees) > 0 {
		l = 0
		for _, e := range m.Guarantees {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgCreateLootboxOptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLootboxOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxQuantity != 0 {
		n += 1 + sovTx(uint64(m.MaxQuantity))
	}
	if len(m.Probability) > 0 {
		l = 0
		for _, e := range m.Probability {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.Guaranteed {
		n += 2
	}
	if len(m.Guarantees) > 0 {
		l = 0
		for _, e := range m.Guarantees {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUpdateLootboxOptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Maker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MakerRelayerFee != 0 {
		n += 1 + sovTx(uint64(m.MakerRelayerFee))
	}
	if m.TakerRelayerFee != 0 {
		n += 1 + sovTx(uint64(m.TakerRelayerFee))
	}
	if m.MakerProtocolFee != 0 {
		n += 1 + sovTx(uint64(m.MakerProtocolFee))
	}
	if m.TakerProtocolFee != 0 {
		n += 1 + sovTx(uint64(m.TakerProtocolFee))
	}
	l = len(m.FeeRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeMethod != 0 {
		n += 1 + sovTx(uint64(m.FeeMethod))
	}
	if m.Side != 0 {
		n += 1 + sovTx(uint64(m.Side))
	}
	if m.SaleKind != 0 {
		n += 1 + sovTx(uint64(m.SaleKind))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BasePrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExtraPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ListingBlock != 0 {
		n += 2 + sovTx(uint64(m.ListingBlock))
	}
	if m.ExpirationBlock != 0 {
		n += 2 + sovTx(uint64(m.ExpirationBlock))
	}
	if m.Salt != 0 {
		n += 2 + sovTx(uint64(m.Salt))
	}
	return n
}

func (m *MsgCreateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Maker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MakerRelayerFee != 0 {
		n += 1 + sovTx(uint64(m.MakerRelayerFee))
	}
	if m.TakerRelayerFee != 0 {
		n += 1 + sovTx(uint64(m.TakerRelayerFee))
	}
	if m.MakerProtocolFee != 0 {
		n += 1 + sovTx(uint64(m.MakerProtocolFee))
	}
	if m.TakerProtocolFee != 0 {
		n += 1 + sovTx(uint64(m.TakerProtocolFee))
	}
	l = len(m.FeeRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeMethod != 0 {
		n += 1 + sovTx(uint64(m.FeeMethod))
	}
	if m.Side != 0 {
		n += 1 + sovTx(uint64(m.Side))
	}
	if m.SaleKind != 0 {
		n += 1 + sovTx(uint64(m.SaleKind))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BasePrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExtraPrice.Size()
	n += 2 + l + sovTx(uint64(l))
	if m.ListingBlock != 0 {
		n += 2 + sovTx(uint64(m.ListingBlock))
	}
	if m.ExpirationBlock != 0 {
		n += 2 + sovTx(uint64(m.ExpirationBlock))
	}
	if m.Salt != 0 {
		n += 2 + sovTx(uint64(m.Salt))
	}
	return n
}

func (m *MsgUpdateOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sell)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLootboxOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLootboxOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLootboxOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQuantity", wireType)
			}
			m.MaxQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Probability = append(m.Probability, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Probability) == 0 {
					m.Probability = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Probability = append(m.Probability, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guaranteed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guaranteed = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Guarantees = append(m.Guarantees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Guarantees) == 0 {
					m.Guarantees = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Guarantees = append(m.Guarantees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Guarantees", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLootboxOptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLootboxOptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLootboxOptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLootboxOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLootboxOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLootboxOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQuantity", wireType)
			}
			m.MaxQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Probability = append(m.Probability, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Probability) == 0 {
					m.Probability = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Probability = append(m.Probability, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guaranteed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guaranteed = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Guarantees = append(m.Guarantees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Guarantees) == 0 {
					m.Guarantees = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Guarantees = append(m.Guarantees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Guarantees", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLootboxOptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLootboxOptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLootboxOptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerRelayerFee", wireType)
			}
			m.MakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerRelayerFee", wireType)
			}
			m.TakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerProtocolFee", wireType)
			}
			m.MakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerProtocolFee", wireType)
			}
			m.TakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMethod", wireType)
			}
			m.FeeMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeMethod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleKind", wireType)
			}
			m.SaleKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleKind |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtraPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingBlock", wireType)
			}
			m.ListingBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListingBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerRelayerFee", wireType)
			}
			m.MakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerRelayerFee", wireType)
			}
			m.TakerRelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerRelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerProtocolFee", wireType)
			}
			m.MakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerProtocolFee", wireType)
			}
			m.TakerProtocolFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerProtocolFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMethod", wireType)
			}
			m.FeeMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeMethod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleKind", wireType)
			}
			m.SaleKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleKind |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtraPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingBlock", wireType)
			}
			m.ListingBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListingBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
