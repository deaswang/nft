// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nmint/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMint struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Count        uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	To           string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MsgMint) Reset()         { *m = MsgMint{} }
func (m *MsgMint) String() string { return proto.CompactTextString(m) }
func (*MsgMint) ProtoMessage()    {}
func (*MsgMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{0}
}
func (m *MsgMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMint.Merge(m, src)
}
func (m *MsgMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMint proto.InternalMessageInfo

func (m *MsgMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMint) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MsgMint) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MsgMintResponse struct {
	TokenId string `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgMintResponse) Reset()         { *m = MsgMintResponse{} }
func (m *MsgMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintResponse) ProtoMessage()    {}
func (*MsgMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{1}
}
func (m *MsgMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintResponse.Merge(m, src)
}
func (m *MsgMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintResponse proto.InternalMessageInfo

func (m *MsgMintResponse) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

type MsgMinterMint struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Count        uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	To           string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MsgMinterMint) Reset()         { *m = MsgMinterMint{} }
func (m *MsgMinterMint) String() string { return proto.CompactTextString(m) }
func (*MsgMinterMint) ProtoMessage()    {}
func (*MsgMinterMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{2}
}
func (m *MsgMinterMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterMint.Merge(m, src)
}
func (m *MsgMinterMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterMint proto.InternalMessageInfo

func (m *MsgMinterMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterMint) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterMint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MsgMinterMint) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MsgMinterMintResponse struct {
	TokenId []string `protobuf:"bytes,1,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgMinterMintResponse) Reset()         { *m = MsgMinterMintResponse{} }
func (m *MsgMinterMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterMintResponse) ProtoMessage()    {}
func (*MsgMinterMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{3}
}
func (m *MsgMinterMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterMintResponse.Merge(m, src)
}
func (m *MsgMinterMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterMintResponse proto.InternalMessageInfo

func (m *MsgMinterMintResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

type MsgMinterInit struct {
	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Admin        string     `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	CollectionId string     `protobuf:"bytes,3,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Supply       uint64     `protobuf:"varint,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Price        types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price"`
}

func (m *MsgMinterInit) Reset()         { *m = MsgMinterInit{} }
func (m *MsgMinterInit) String() string { return proto.CompactTextString(m) }
func (*MsgMinterInit) ProtoMessage()    {}
func (*MsgMinterInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{4}
}
func (m *MsgMinterInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterInit.Merge(m, src)
}
func (m *MsgMinterInit) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterInit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterInit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterInit proto.InternalMessageInfo

func (m *MsgMinterInit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterInit) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMinterInit) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterInit) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *MsgMinterInit) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

type MsgMinterInitResponse struct {
}

func (m *MsgMinterInitResponse) Reset()         { *m = MsgMinterInitResponse{} }
func (m *MsgMinterInitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterInitResponse) ProtoMessage()    {}
func (*MsgMinterInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{5}
}
func (m *MsgMinterInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterInitResponse.Merge(m, src)
}
func (m *MsgMinterInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterInitResponse proto.InternalMessageInfo

type MsgMinterPause struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Paused       bool   `protobuf:"varint,3,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *MsgMinterPause) Reset()         { *m = MsgMinterPause{} }
func (m *MsgMinterPause) String() string { return proto.CompactTextString(m) }
func (*MsgMinterPause) ProtoMessage()    {}
func (*MsgMinterPause) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{6}
}
func (m *MsgMinterPause) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterPause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterPause.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterPause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterPause.Merge(m, src)
}
func (m *MsgMinterPause) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterPause) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterPause.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterPause proto.InternalMessageInfo

func (m *MsgMinterPause) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterPause) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterPause) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

type MsgMinterPauseResponse struct {
}

func (m *MsgMinterPauseResponse) Reset()         { *m = MsgMinterPauseResponse{} }
func (m *MsgMinterPauseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterPauseResponse) ProtoMessage()    {}
func (*MsgMinterPauseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{7}
}
func (m *MsgMinterPauseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterPauseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterPauseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterPauseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterPauseResponse.Merge(m, src)
}
func (m *MsgMinterPauseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterPauseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterPauseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterPauseResponse proto.InternalMessageInfo

type MsgMinterwlInit struct {
	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Admin        string     `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	CollectionId string     `protobuf:"bytes,3,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Supply       uint64     `protobuf:"varint,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Whitelist    []string   `protobuf:"bytes,5,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Wllimit      uint64     `protobuf:"varint,6,opt,name=wllimit,proto3" json:"wllimit,omitempty"`
	Price        types.Coin `protobuf:"bytes,7,opt,name=price,proto3" json:"price"`
}

func (m *MsgMinterwlInit) Reset()         { *m = MsgMinterwlInit{} }
func (m *MsgMinterwlInit) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlInit) ProtoMessage()    {}
func (*MsgMinterwlInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{8}
}
func (m *MsgMinterwlInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlInit.Merge(m, src)
}
func (m *MsgMinterwlInit) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlInit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlInit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlInit proto.InternalMessageInfo

func (m *MsgMinterwlInit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterwlInit) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMinterwlInit) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterwlInit) GetSupply() uint64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *MsgMinterwlInit) GetWhitelist() []string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *MsgMinterwlInit) GetWllimit() uint64 {
	if m != nil {
		return m.Wllimit
	}
	return 0
}

func (m *MsgMinterwlInit) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

type MsgMinterwlInitResponse struct {
}

func (m *MsgMinterwlInitResponse) Reset()         { *m = MsgMinterwlInitResponse{} }
func (m *MsgMinterwlInitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlInitResponse) ProtoMessage()    {}
func (*MsgMinterwlInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{9}
}
func (m *MsgMinterwlInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlInitResponse.Merge(m, src)
}
func (m *MsgMinterwlInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlInitResponse proto.InternalMessageInfo

type MsgMinterwlMint struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Count        uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *MsgMinterwlMint) Reset()         { *m = MsgMinterwlMint{} }
func (m *MsgMinterwlMint) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlMint) ProtoMessage()    {}
func (*MsgMinterwlMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{10}
}
func (m *MsgMinterwlMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlMint.Merge(m, src)
}
func (m *MsgMinterwlMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlMint proto.InternalMessageInfo

func (m *MsgMinterwlMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterwlMint) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterwlMint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MsgMinterwlMintResponse struct {
	TokenId []string `protobuf:"bytes,1,rep,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgMinterwlMintResponse) Reset()         { *m = MsgMinterwlMintResponse{} }
func (m *MsgMinterwlMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlMintResponse) ProtoMessage()    {}
func (*MsgMinterwlMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{11}
}
func (m *MsgMinterwlMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlMintResponse.Merge(m, src)
}
func (m *MsgMinterwlMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlMintResponse proto.InternalMessageInfo

func (m *MsgMinterwlMintResponse) GetTokenId() []string {
	if m != nil {
		return m.TokenId
	}
	return nil
}

type MsgMinterwlWhitelist struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string   `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Whitelist    []string `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Wllimit      uint64   `protobuf:"varint,4,opt,name=wllimit,proto3" json:"wllimit,omitempty"`
}

func (m *MsgMinterwlWhitelist) Reset()         { *m = MsgMinterwlWhitelist{} }
func (m *MsgMinterwlWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlWhitelist) ProtoMessage()    {}
func (*MsgMinterwlWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{12}
}
func (m *MsgMinterwlWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlWhitelist.Merge(m, src)
}
func (m *MsgMinterwlWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlWhitelist proto.InternalMessageInfo

func (m *MsgMinterwlWhitelist) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterwlWhitelist) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterwlWhitelist) GetWhitelist() []string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *MsgMinterwlWhitelist) GetWllimit() uint64 {
	if m != nil {
		return m.Wllimit
	}
	return 0
}

type MsgMinterwlWhitelistResponse struct {
}

func (m *MsgMinterwlWhitelistResponse) Reset()         { *m = MsgMinterwlWhitelistResponse{} }
func (m *MsgMinterwlWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlWhitelistResponse) ProtoMessage()    {}
func (*MsgMinterwlWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{13}
}
func (m *MsgMinterwlWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlWhitelistResponse.Merge(m, src)
}
func (m *MsgMinterwlWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlWhitelistResponse proto.InternalMessageInfo

type MsgMinterwlPrice struct {
	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string     `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Price        types.Coin `protobuf:"bytes,3,opt,name=price,proto3" json:"price"`
}

func (m *MsgMinterwlPrice) Reset()         { *m = MsgMinterwlPrice{} }
func (m *MsgMinterwlPrice) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlPrice) ProtoMessage()    {}
func (*MsgMinterwlPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{14}
}
func (m *MsgMinterwlPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlPrice.Merge(m, src)
}
func (m *MsgMinterwlPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlPrice proto.InternalMessageInfo

func (m *MsgMinterwlPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterwlPrice) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterwlPrice) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

type MsgMinterwlPriceResponse struct {
}

func (m *MsgMinterwlPriceResponse) Reset()         { *m = MsgMinterwlPriceResponse{} }
func (m *MsgMinterwlPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterwlPriceResponse) ProtoMessage()    {}
func (*MsgMinterwlPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{15}
}
func (m *MsgMinterwlPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterwlPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterwlPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterwlPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterwlPriceResponse.Merge(m, src)
}
func (m *MsgMinterwlPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterwlPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterwlPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterwlPriceResponse proto.InternalMessageInfo

type MsgMinterPrice struct {
	Creator      string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId string     `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Price        types.Coin `protobuf:"bytes,3,opt,name=price,proto3" json:"price"`
}

func (m *MsgMinterPrice) Reset()         { *m = MsgMinterPrice{} }
func (m *MsgMinterPrice) String() string { return proto.CompactTextString(m) }
func (*MsgMinterPrice) ProtoMessage()    {}
func (*MsgMinterPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{16}
}
func (m *MsgMinterPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterPrice.Merge(m, src)
}
func (m *MsgMinterPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterPrice proto.InternalMessageInfo

func (m *MsgMinterPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMinterPrice) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgMinterPrice) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

type MsgMinterPriceResponse struct {
}

func (m *MsgMinterPriceResponse) Reset()         { *m = MsgMinterPriceResponse{} }
func (m *MsgMinterPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMinterPriceResponse) ProtoMessage()    {}
func (*MsgMinterPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a129d5799026f51, []int{17}
}
func (m *MsgMinterPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMinterPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMinterPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMinterPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMinterPriceResponse.Merge(m, src)
}
func (m *MsgMinterPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMinterPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMinterPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMinterPriceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMint)(nil), "deaswang.nft.nmint.MsgMint")
	proto.RegisterType((*MsgMintResponse)(nil), "deaswang.nft.nmint.MsgMintResponse")
	proto.RegisterType((*MsgMinterMint)(nil), "deaswang.nft.nmint.MsgMinterMint")
	proto.RegisterType((*MsgMinterMintResponse)(nil), "deaswang.nft.nmint.MsgMinterMintResponse")
	proto.RegisterType((*MsgMinterInit)(nil), "deaswang.nft.nmint.MsgMinterInit")
	proto.RegisterType((*MsgMinterInitResponse)(nil), "deaswang.nft.nmint.MsgMinterInitResponse")
	proto.RegisterType((*MsgMinterPause)(nil), "deaswang.nft.nmint.MsgMinterPause")
	proto.RegisterType((*MsgMinterPauseResponse)(nil), "deaswang.nft.nmint.MsgMinterPauseResponse")
	proto.RegisterType((*MsgMinterwlInit)(nil), "deaswang.nft.nmint.MsgMinterwlInit")
	proto.RegisterType((*MsgMinterwlInitResponse)(nil), "deaswang.nft.nmint.MsgMinterwlInitResponse")
	proto.RegisterType((*MsgMinterwlMint)(nil), "deaswang.nft.nmint.MsgMinterwlMint")
	proto.RegisterType((*MsgMinterwlMintResponse)(nil), "deaswang.nft.nmint.MsgMinterwlMintResponse")
	proto.RegisterType((*MsgMinterwlWhitelist)(nil), "deaswang.nft.nmint.MsgMinterwlWhitelist")
	proto.RegisterType((*MsgMinterwlWhitelistResponse)(nil), "deaswang.nft.nmint.MsgMinterwlWhitelistResponse")
	proto.RegisterType((*MsgMinterwlPrice)(nil), "deaswang.nft.nmint.MsgMinterwlPrice")
	proto.RegisterType((*MsgMinterwlPriceResponse)(nil), "deaswang.nft.nmint.MsgMinterwlPriceResponse")
	proto.RegisterType((*MsgMinterPrice)(nil), "deaswang.nft.nmint.MsgMinterPrice")
	proto.RegisterType((*MsgMinterPriceResponse)(nil), "deaswang.nft.nmint.MsgMinterPriceResponse")
}

func init() { proto.RegisterFile("nmint/tx.proto", fileDescriptor_6a129d5799026f51) }

var fileDescriptor_6a129d5799026f51 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xde, 0x61, 0xff, 0xf0, 0xe3, 0xe5, 0xcf, 0x4f, 0x9b, 0x15, 0x4a, 0x25, 0x15, 0x8b, 0x26,
	0x2b, 0x98, 0x56, 0x20, 0x9e, 0x4d, 0xf0, 0x22, 0x07, 0x12, 0xb2, 0x17, 0x13, 0x12, 0x13, 0xbb,
	0x65, 0x58, 0x26, 0x76, 0x67, 0x9a, 0x9d, 0x59, 0x17, 0x3e, 0x80, 0xf1, 0xe2, 0xc1, 0xcf, 0xe2,
	0xa7, 0xe0, 0xc8, 0xd1, 0x93, 0x1a, 0xb8, 0xfa, 0x21, 0x4c, 0xa7, 0xed, 0x30, 0x65, 0x37, 0xed,
	0x12, 0x22, 0x5e, 0xc8, 0xbe, 0x33, 0xcf, 0xfb, 0x3e, 0xcf, 0x3c, 0xef, 0x3b, 0x43, 0x61, 0x81,
	0xf6, 0x08, 0x15, 0x9e, 0x38, 0x71, 0xa3, 0x3e, 0x13, 0xcc, 0x30, 0x0e, 0xb1, 0xcf, 0x87, 0x3e,
	0xed, 0xba, 0xf4, 0x48, 0xb8, 0x72, 0xd3, 0x32, 0x12, 0x4c, 0xfc, 0x07, 0xf7, 0x13, 0x9c, 0xd5,
	0xd4, 0xd7, 0x86, 0x61, 0xba, 0x6a, 0x07, 0x8c, 0xf7, 0x18, 0xf7, 0x3a, 0x3e, 0xc7, 0xde, 0xc7,
	0xcd, 0x0e, 0x16, 0xfe, 0xa6, 0x17, 0x30, 0x42, 0xb3, 0xac, 0x2e, 0xeb, 0x32, 0xf9, 0xd3, 0x8b,
	0x7f, 0x25, 0xab, 0x4e, 0x0f, 0xa6, 0xf7, 0x78, 0x77, 0x8f, 0x50, 0x61, 0x98, 0x30, 0x1d, 0xf4,
	0xb1, 0x2f, 0x58, 0xdf, 0x44, 0xab, 0xa8, 0x35, 0xd3, 0xce, 0x42, 0xc3, 0x81, 0xb9, 0x80, 0x85,
	0x21, 0x0e, 0x04, 0x61, 0x74, 0xf7, 0xd0, 0x9c, 0x92, 0xdb, 0xb9, 0x35, 0xa3, 0x09, 0xf5, 0x80,
	0x0d, 0xa8, 0x30, 0xab, 0xab, 0xa8, 0x55, 0x6b, 0x27, 0x81, 0xb1, 0x00, 0x53, 0x82, 0x99, 0x35,
	0x89, 0x9f, 0x12, 0xcc, 0xd9, 0x80, 0xff, 0x53, 0xba, 0x36, 0xe6, 0x11, 0xa3, 0x1c, 0xc7, 0xb4,
	0x82, 0x7d, 0xc0, 0x71, 0xdd, 0x94, 0x36, 0x0d, 0x1d, 0x0e, 0xf3, 0x29, 0x18, 0xf7, 0xef, 0x4c,
	0xe1, 0x26, 0x3c, 0xc8, 0x91, 0x8e, 0xd7, 0x59, 0xd5, 0x75, 0x7e, 0x43, 0x9a, 0xd0, 0x5d, 0x4a,
	0x8a, 0x84, 0x36, 0xa1, 0xee, 0x1f, 0xf6, 0x08, 0x4d, 0x15, 0x26, 0xc1, 0x88, 0xfc, 0xea, 0x18,
	0xf9, 0x8b, 0xd0, 0xe0, 0x83, 0x28, 0x0a, 0x4f, 0xa5, 0xd8, 0x5a, 0x3b, 0x8d, 0x8c, 0x97, 0x50,
	0x8f, 0xfa, 0x24, 0xc0, 0x66, 0x7d, 0x15, 0xb5, 0x66, 0xb7, 0x96, 0xdd, 0x64, 0x0e, 0xdc, 0x78,
	0x0e, 0xdc, 0x74, 0x0e, 0xdc, 0xd7, 0x8c, 0xd0, 0x9d, 0xda, 0xd9, 0x8f, 0x47, 0x95, 0x76, 0x82,
	0x76, 0x96, 0xb4, 0x73, 0xc6, 0x9a, 0xb3, 0x73, 0x3a, 0x47, 0xb0, 0xa0, 0x36, 0xf6, 0xfd, 0x41,
	0x72, 0xf2, 0x5b, 0xd8, 0xbe, 0x08, 0x8d, 0x28, 0x2e, 0x93, 0x9c, 0xea, 0xbf, 0x76, 0x1a, 0x39,
	0x26, 0x2c, 0xe6, 0x79, 0x94, 0x82, 0xdf, 0x48, 0x4d, 0x49, 0x3c, 0xdf, 0x77, 0xee, 0xe8, 0x0a,
	0xcc, 0x0c, 0x8f, 0x89, 0xc0, 0x21, 0xe1, 0xc2, 0xac, 0xcb, 0x5e, 0x5f, 0x2d, 0xc4, 0x4a, 0x86,
	0x61, 0x48, 0x7a, 0x44, 0x98, 0x0d, 0x99, 0x96, 0x85, 0x57, 0x9d, 0x98, 0xbe, 0x51, 0x27, 0x96,
	0x61, 0xe9, 0xda, 0x69, 0x95, 0x13, 0x38, 0x67, 0xc4, 0xdf, 0xba, 0x03, 0xce, 0x76, 0x4e, 0xc1,
	0x84, 0x53, 0xff, 0x05, 0x41, 0x53, 0xcb, 0x7a, 0xab, 0x1b, 0x74, 0x0b, 0x85, 0x39, 0xf3, 0xab,
	0x05, 0xe6, 0xd7, 0x72, 0xe6, 0x3b, 0x36, 0xac, 0x8c, 0x53, 0xa3, 0xac, 0xfc, 0x8c, 0xe0, 0x9e,
	0x06, 0xd8, 0x8f, 0xad, 0xbf, 0xa5, 0x54, 0xd5, 0xef, 0xea, 0x8d, 0xfa, 0x6d, 0x81, 0x79, 0x5d,
	0x88, 0x52, 0xf9, 0x09, 0xe9, 0xb7, 0xef, 0xdf, 0x69, 0xcc, 0x5d, 0x4e, 0x5d, 0xe1, 0xd6, 0xcf,
	0x06, 0x54, 0xf7, 0x78, 0xd7, 0x78, 0x03, 0x35, 0x39, 0x8f, 0x0f, 0xdd, 0xd1, 0xff, 0x5a, 0x6e,
	0x9a, 0x6b, 0xad, 0x15, 0x6c, 0xaa, 0x11, 0x3b, 0x00, 0xd0, 0xde, 0xf8, 0xc7, 0x05, 0x29, 0x09,
	0xc4, 0x7a, 0x56, 0x0a, 0x19, 0xad, 0x2d, 0x1f, 0x91, 0xe2, 0xda, 0x31, 0xa4, 0xa4, 0xb6, 0x7e,
	0x39, 0x8d, 0x77, 0x30, 0xab, 0xbf, 0x92, 0x4e, 0x61, 0xa6, 0xc4, 0x58, 0xeb, 0xe5, 0x18, 0x55,
	0xfe, 0x3d, 0xcc, 0xe5, 0x5e, 0xc0, 0xb5, 0xc2, 0xdc, 0x04, 0x64, 0x6d, 0x4c, 0x00, 0x1a, 0xc7,
	0x20, 0xad, 0x2f, 0x63, 0x90, 0xe6, 0x6f, 0x4c, 0x00, 0x52, 0x0c, 0x0c, 0xee, 0x8f, 0xbe, 0x0f,
	0xad, 0x92, 0x0a, 0x0a, 0x69, 0xbd, 0x98, 0x14, 0xa9, 0x08, 0x03, 0x98, 0xcf, 0xdf, 0xf0, 0x27,
	0x25, 0x25, 0x24, 0xca, 0x7a, 0x3e, 0x09, 0x6a, 0x4c, 0xe3, 0x25, 0x45, 0x49, 0xe3, 0x25, 0xc1,
	0x7a, 0x39, 0x26, 0x2b, 0xbf, 0xf3, 0xea, 0xec, 0xc2, 0x46, 0xe7, 0x17, 0x36, 0xfa, 0x75, 0x61,
	0xa3, 0xaf, 0x97, 0x76, 0xe5, 0xfc, 0xd2, 0xae, 0x7c, 0xbf, 0xb4, 0x2b, 0x07, 0x4f, 0xbb, 0x44,
	0x1c, 0x0f, 0x3a, 0x6e, 0xc0, 0x7a, 0x5e, 0x56, 0xcf, 0xa3, 0x47, 0xc2, 0x3b, 0xf1, 0xd2, 0x4f,
	0xc9, 0xd3, 0x08, 0xf3, 0x4e, 0x43, 0x7e, 0xda, 0x6d, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x52,
	0xd8, 0x25, 0xf8, 0x60, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	//     rpc CreateMinter(MsgCreateMinter) returns (MsgCreateMinterResponse);
	// rpc UpdateMinter(MsgUpdateMinter) returns (MsgUpdateMinterResponse);
	// rpc DeleteMinter(MsgDeleteMinter) returns (MsgDeleteMinterResponse);
	Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error)
	MinterMint(ctx context.Context, in *MsgMinterMint, opts ...grpc.CallOption) (*MsgMinterMintResponse, error)
	MinterInit(ctx context.Context, in *MsgMinterInit, opts ...grpc.CallOption) (*MsgMinterInitResponse, error)
	MinterPause(ctx context.Context, in *MsgMinterPause, opts ...grpc.CallOption) (*MsgMinterPauseResponse, error)
	// rpc CreateMinterwl(MsgCreateMinterwl) returns (MsgCreateMinterwlResponse);
	// rpc UpdateMinterwl(MsgUpdateMinterwl) returns (MsgUpdateMinterwlResponse);
	// rpc DeleteMinterwl(MsgDeleteMinterwl) returns (MsgDeleteMinterwlResponse);
	MinterwlInit(ctx context.Context, in *MsgMinterwlInit, opts ...grpc.CallOption) (*MsgMinterwlInitResponse, error)
	MinterwlMint(ctx context.Context, in *MsgMinterwlMint, opts ...grpc.CallOption) (*MsgMinterwlMintResponse, error)
	MinterwlWhitelist(ctx context.Context, in *MsgMinterwlWhitelist, opts ...grpc.CallOption) (*MsgMinterwlWhitelistResponse, error)
	MinterwlPrice(ctx context.Context, in *MsgMinterwlPrice, opts ...grpc.CallOption) (*MsgMinterwlPriceResponse, error)
	MinterPrice(ctx context.Context, in *MsgMinterPrice, opts ...grpc.CallOption) (*MsgMinterPriceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterMint(ctx context.Context, in *MsgMinterMint, opts ...grpc.CallOption) (*MsgMinterMintResponse, error) {
	out := new(MsgMinterMintResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterInit(ctx context.Context, in *MsgMinterInit, opts ...grpc.CallOption) (*MsgMinterInitResponse, error) {
	out := new(MsgMinterInitResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterPause(ctx context.Context, in *MsgMinterPause, opts ...grpc.CallOption) (*MsgMinterPauseResponse, error) {
	out := new(MsgMinterPauseResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterwlInit(ctx context.Context, in *MsgMinterwlInit, opts ...grpc.CallOption) (*MsgMinterwlInitResponse, error) {
	out := new(MsgMinterwlInitResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterwlInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterwlMint(ctx context.Context, in *MsgMinterwlMint, opts ...grpc.CallOption) (*MsgMinterwlMintResponse, error) {
	out := new(MsgMinterwlMintResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterwlMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterwlWhitelist(ctx context.Context, in *MsgMinterwlWhitelist, opts ...grpc.CallOption) (*MsgMinterwlWhitelistResponse, error) {
	out := new(MsgMinterwlWhitelistResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterwlWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterwlPrice(ctx context.Context, in *MsgMinterwlPrice, opts ...grpc.CallOption) (*MsgMinterwlPriceResponse, error) {
	out := new(MsgMinterwlPriceResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterwlPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MinterPrice(ctx context.Context, in *MsgMinterPrice, opts ...grpc.CallOption) (*MsgMinterPriceResponse, error) {
	out := new(MsgMinterPriceResponse)
	err := c.cc.Invoke(ctx, "/deaswang.nft.nmint.Msg/MinterPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	//     rpc CreateMinter(MsgCreateMinter) returns (MsgCreateMinterResponse);
	// rpc UpdateMinter(MsgUpdateMinter) returns (MsgUpdateMinterResponse);
	// rpc DeleteMinter(MsgDeleteMinter) returns (MsgDeleteMinterResponse);
	Mint(context.Context, *MsgMint) (*MsgMintResponse, error)
	MinterMint(context.Context, *MsgMinterMint) (*MsgMinterMintResponse, error)
	MinterInit(context.Context, *MsgMinterInit) (*MsgMinterInitResponse, error)
	MinterPause(context.Context, *MsgMinterPause) (*MsgMinterPauseResponse, error)
	// rpc CreateMinterwl(MsgCreateMinterwl) returns (MsgCreateMinterwlResponse);
	// rpc UpdateMinterwl(MsgUpdateMinterwl) returns (MsgUpdateMinterwlResponse);
	// rpc DeleteMinterwl(MsgDeleteMinterwl) returns (MsgDeleteMinterwlResponse);
	MinterwlInit(context.Context, *MsgMinterwlInit) (*MsgMinterwlInitResponse, error)
	MinterwlMint(context.Context, *MsgMinterwlMint) (*MsgMinterwlMintResponse, error)
	MinterwlWhitelist(context.Context, *MsgMinterwlWhitelist) (*MsgMinterwlWhitelistResponse, error)
	MinterwlPrice(context.Context, *MsgMinterwlPrice) (*MsgMinterwlPriceResponse, error)
	MinterPrice(context.Context, *MsgMinterPrice) (*MsgMinterPriceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Mint(ctx context.Context, req *MsgMint) (*MsgMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedMsgServer) MinterMint(ctx context.Context, req *MsgMinterMint) (*MsgMinterMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterMint not implemented")
}
func (*UnimplementedMsgServer) MinterInit(ctx context.Context, req *MsgMinterInit) (*MsgMinterInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterInit not implemented")
}
func (*UnimplementedMsgServer) MinterPause(ctx context.Context, req *MsgMinterPause) (*MsgMinterPauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterPause not implemented")
}
func (*UnimplementedMsgServer) MinterwlInit(ctx context.Context, req *MsgMinterwlInit) (*MsgMinterwlInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterwlInit not implemented")
}
func (*UnimplementedMsgServer) MinterwlMint(ctx context.Context, req *MsgMinterwlMint) (*MsgMinterwlMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterwlMint not implemented")
}
func (*UnimplementedMsgServer) MinterwlWhitelist(ctx context.Context, req *MsgMinterwlWhitelist) (*MsgMinterwlWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterwlWhitelist not implemented")
}
func (*UnimplementedMsgServer) MinterwlPrice(ctx context.Context, req *MsgMinterwlPrice) (*MsgMinterwlPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterwlPrice not implemented")
}
func (*UnimplementedMsgServer) MinterPrice(ctx context.Context, req *MsgMinterPrice) (*MsgMinterPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinterPrice not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterMint(ctx, req.(*MsgMinterMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterInit(ctx, req.(*MsgMinterInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterPause)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterPause(ctx, req.(*MsgMinterPause))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterwlInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterwlInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterwlInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterwlInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterwlInit(ctx, req.(*MsgMinterwlInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterwlMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterwlMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterwlMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterwlMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterwlMint(ctx, req.(*MsgMinterwlMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterwlWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterwlWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterwlWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterwlWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterwlWhitelist(ctx, req.(*MsgMinterwlWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterwlPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterwlPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterwlPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterwlPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterwlPrice(ctx, req.(*MsgMinterwlPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MinterPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMinterPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MinterPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deaswang.nft.nmint.Msg/MinterPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MinterPrice(ctx, req.(*MsgMinterPrice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deaswang.nft.nmint.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "MinterMint",
			Handler:    _Msg_MinterMint_Handler,
		},
		{
			MethodName: "MinterInit",
			Handler:    _Msg_MinterInit_Handler,
		},
		{
			MethodName: "MinterPause",
			Handler:    _Msg_MinterPause_Handler,
		},
		{
			MethodName: "MinterwlInit",
			Handler:    _Msg_MinterwlInit_Handler,
		},
		{
			MethodName: "MinterwlMint",
			Handler:    _Msg_MinterwlMint_Handler,
		},
		{
			MethodName: "MinterwlWhitelist",
			Handler:    _Msg_MinterwlWhitelist_Handler,
		},
		{
			MethodName: "MinterwlPrice",
			Handler:    _Msg_MinterwlPrice_Handler,
		},
		{
			MethodName: "MinterPrice",
			Handler:    _Msg_MinterPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nmint/tx.proto",
}

func (m *MsgMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if m.Count != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if m.Count != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Supply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMinterPause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterPause) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterPause) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterPauseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterPauseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterPauseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Wllimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Wllimit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Whitelist[iNdEx])
			copy(dAtA[i:], m.Whitelist[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Whitelist[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Supply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for iNdEx := len(m.TokenId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenId[iNdEx])
			copy(dAtA[i:], m.TokenId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wllimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Wllimit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Whitelist[iNdEx])
			copy(dAtA[i:], m.Whitelist[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Whitelist[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterwlPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterwlPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterwlPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMinterPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMinterPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMinterPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMinterPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTx(uint64(m.Count))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMinterMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTx(uint64(m.Count))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMinterMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMinterInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Supply != 0 {
		n += 1 + sovTx(uint64(m.Supply))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMinterInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMinterPause) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	return n
}

func (m *MsgMinterPauseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMinterwlInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Supply != 0 {
		n += 1 + sovTx(uint64(m.Supply))
	}
	if len(m.Whitelist) > 0 {
		for _, s := range m.Whitelist {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Wllimit != 0 {
		n += 1 + sovTx(uint64(m.Wllimit))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMinterwlInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMinterwlMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTx(uint64(m.Count))
	}
	return n
}

func (m *MsgMinterwlMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		for _, s := range m.TokenId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMinterwlWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Whitelist) > 0 {
		for _, s := range m.Whitelist {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Wllimit != 0 {
		n += 1 + sovTx(uint64(m.Wllimit))
	}
	return n
}

func (m *MsgMinterwlWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMinterwlPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMinterwlPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMinterPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMinterPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterPause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterPause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterPause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterPauseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterPauseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterPauseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wllimit", wireType)
			}
			m.Wllimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wllimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wllimit", wireType)
			}
			m.Wllimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wllimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterwlPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterwlPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterwlPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMinterPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMinterPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMinterPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
